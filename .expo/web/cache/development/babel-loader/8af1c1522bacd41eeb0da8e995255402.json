{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport MapViewDirections from \"react-native-maps-directions\";\nimport axios from \"axios\";\nimport * as Location from \"expo-location\";\nimport { Google } from \"expo\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Title, ItalicText } from \"../../components/components/index.style\";\nimport { Container, MapContainer, Image, Text, ThemeButton, ThemeButtonText, ThemeButton2, ThemeButtonText2, RoundButton } from \"./index.style\";\nimport { ScrollView } from \"react-navigation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction MapPage(_ref) {\n  var navigation = _ref.navigation;\n  var origin = \"Bangkok\";\n  var apiKey = \"AIzaSyA-Pb23fMnh-ofKWhoP9PC9Aaj9C81MCQM\";\n  var markers = [{\n    latitude: 13.773508065440815,\n    longitude: 100.5730804572769\n  }, {\n    latitude: 8.444526370150388,\n    longitude: 99.96210658564331\n  }, {\n    latitude: 13.771864275082038,\n    longitude: 100.57586464969924\n  }, {\n    latitude: 13.97918633927129,\n    longitude: 98.33740674666498\n  }];\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    errorMsg = _useState2[0],\n    setErrorMsg = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    region = _useState4[0],\n    setRegion = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    nearbyPlaces = _useState6[0],\n    setNearby = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    destinationMap = _useState8[0],\n    setDestination = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    loading = _useState10[0],\n    setLoading = _useState10[1];\n  var getHospital = function () {\n    var _ref2 = _asyncToGenerator(function* (lat, lng) {\n      var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n      setLoading(true);\n      var curLocation = lat + \"%2c\" + lng;\n      var placesUrl = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" + curLocation + \"&radius=\" + radius + \"&type=hospital&key=\" + apiKey;\n      var response = yield axios.get(placesUrl);\n      setRegion({\n        region: {\n          latitude: lat,\n          longitude: lng,\n          latitudeDelta: 5,\n          longitudeDelta: 5\n        }\n      });\n      if (response != null) {\n        setNearby(response.data.results);\n        setLoading(false);\n      }\n    });\n    return function getHospital(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getDistance = function () {\n    var _ref3 = _asyncToGenerator(function* (curLocation, destination, name) {\n      var distanceUrl = \"https://maps.googleapis.com/maps/api/distancematrix/json?units=metric&origins=\" + curLocation + \"&destinations=\" + destination + \"&key=\" + apiKey;\n      var response = yield axios.get(distanceUrl);\n      if (response != null) {\n        console.log(name, response.data.rows[0].elements[0].distance.text, response.data.rows[0].elements[0].duration.text);\n      }\n    });\n    return function getDistance(_x3, _x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    _asyncToGenerator(function* () {\n      var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),\n        status = _yield$Location$reque.status;\n      if (status !== \"granted\") {\n        setErrorMsg(\"Permission to access location was denied\");\n        return;\n      }\n      var location = yield Location.getCurrentPositionAsync({});\n      getHospital(location.coords.latitude, location.coords.longitude);\n    })();\n  }, []);\n  var text = \"Waiting..\";\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (region) {\n    text = JSON.stringify(region);\n  }\n  return _jsxs(Container, {\n    children: [loading ? _jsx(MapContainer, {\n      children: _jsx(ActivityIndicator, {\n        size: \"large\"\n      })\n    }) : _jsx(MapContainer, {\n      children: _jsx(MapView, {\n        style: {\n          flex: 1\n        },\n        initialRegion: region.region,\n        provider: \"google\",\n        showsUserLocation: true,\n        showsMyLocationButton: true,\n        showsCompass: true,\n        zoomEnabled: true,\n        zoomControlEnabled: true,\n        rotateEnabled: false,\n        mapType: \"standard\",\n        onMapReady: function onMapReady() {\n          return console.log(\"Map is ready!\");\n        },\n        onMapError: function onMapError(error) {\n          return console.log(error);\n        },\n        onLongPress: function onLongPress(e) {\n          return getHospital(region.region.latitude, region.region.longitude, 10000);\n        },\n        onMarkerPress: function onMarkerPress(e) {\n          return console.log(e.nativeEvent.coordinate);\n        },\n        children: nearbyPlaces.map(function (val, index) {\n          return _jsx(View, {\n            children: _jsx(Marker, {\n              coordinate: {\n                latitude: val.geometry.location.lat,\n                longitude: val.geometry.location.lng,\n                latitudeDelta: 0.01,\n                longitudeDelta: 0.01\n              }\n            })\n          }, index);\n        })\n      })\n    }), _jsx(ThemeButton2, {\n      onPress: function onPress() {\n        return navigation.navigate(\"Landing\");\n      },\n      children: _jsx(ThemeButtonText2, {\n        children: \"Firstaid Knowledge\"\n      })\n    })]\n  });\n}\nexport default MapPage;","map":{"version":3,"names":["React","useState","useEffect","MapView","Marker","MapViewDirections","axios","Location","Google","Title","ItalicText","Container","MapContainer","Image","Text","ThemeButton","ThemeButtonText","ThemeButton2","ThemeButtonText2","RoundButton","ScrollView","MapPage","navigation","origin","apiKey","markers","latitude","longitude","errorMsg","setErrorMsg","region","setRegion","nearbyPlaces","setNearby","destinationMap","setDestination","loading","setLoading","getHospital","lat","lng","radius","curLocation","placesUrl","response","get","latitudeDelta","longitudeDelta","data","results","getDistance","destination","name","distanceUrl","console","log","rows","elements","distance","text","duration","requestForegroundPermissionsAsync","status","location","getCurrentPositionAsync","coords","JSON","stringify","flex","error","e","nativeEvent","coordinate","map","val","index","geometry","navigate"],"sources":["C:/Users/Teety/Documents/GitHub/TeamPro2/src/views/Map/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MapView, { Marker } from \"react-native-maps\";\r\nimport MapViewDirections from \"react-native-maps-directions\";\r\nimport axios from \"axios\";\r\nimport * as Location from \"expo-location\";\r\nimport { Google } from \"expo\";\r\nimport {\r\n  SafeAreaView,\r\n  View,\r\n  ActivityIndicator,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport { Title, ItalicText } from \"../../components/components/index.style\";\r\nimport {\r\n  Container,\r\n  MapContainer,\r\n  Image,\r\n  Text,\r\n  ThemeButton,\r\n  ThemeButtonText,\r\n  ThemeButton2,\r\n  ThemeButtonText2,\r\n  RoundButton,\r\n} from \"./index.style\";\r\nimport { ScrollView } from \"react-navigation\";\r\n\r\nfunction MapPage({ navigation }) {\r\n  const origin = \"Bangkok\";\r\n  // const destination = \"Nakhon Si Thammarat\";\r\n  const apiKey = \"AIzaSyA-Pb23fMnh-ofKWhoP9PC9Aaj9C81MCQM\";\r\n  // const distanceUrl = `https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=${origin}&destinations=${destination}&key=${apiKey}`;\r\n  // const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=13.771864275082%2c100.575864649699&radius=500&type=hospital&key=${apiKey}`;\r\n  const markers = [\r\n    { latitude: 13.773508065440815, longitude: 100.5730804572769 },\r\n    { latitude: 8.444526370150388, longitude: 99.96210658564331 },\r\n    { latitude: 13.771864275082038, longitude: 100.57586464969924 },\r\n    { latitude: 13.97918633927129, longitude: 98.33740674666498 },\r\n  ];\r\n  // axios.get(placesUrl);\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n  const [region, setRegion] = useState(null);\r\n  const [nearbyPlaces, setNearby] = useState(null);\r\n  const [destinationMap, setDestination] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const getHospital = async (lat, lng, radius = 1000) => {\r\n    setLoading(true);\r\n    let curLocation = lat + \"%2c\" + lng;\r\n    const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${curLocation}&radius=${radius}&type=hospital&key=${apiKey}`;\r\n    const response = await axios.get(placesUrl);\r\n    setRegion({\r\n      region: {\r\n        latitude: lat,\r\n        longitude: lng,\r\n        latitudeDelta: 5,\r\n        longitudeDelta: 5,\r\n      },\r\n    });\r\n    if (response != null) {\r\n      setNearby(response.data.results);\r\n      //   if (nearbyPlaces != null) {\r\n      //     nearbyPlaces.map((val) => {\r\n      //       let destination =\r\n      //         val.geometry.location.lat + \"%2c\" + val.geometry.location.lng;\r\n      //       getDistance(curLocation, destination, val.name);\r\n      //     });\r\n      //   }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getDistance = async (curLocation, destination, name) => {\r\n    const distanceUrl = `https://maps.googleapis.com/maps/api/distancematrix/json?units=metric&origins=${curLocation}&destinations=${destination}&key=${apiKey}`;\r\n    const response = await axios.get(distanceUrl);\r\n    if (response != null) {\r\n      console.log(\r\n        name,\r\n        response.data.rows[0].elements[0].distance.text,\r\n        response.data.rows[0].elements[0].duration.text\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // axios\r\n    //   .get(placesUrl)\r\n    //   .then((response) => {\r\n    //     setNearby(response.data.results);\r\n    //     console.log(nearbyPlaces);\r\n    //     setLoading(false);\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(\"Error!!!!!!!!!!!!!!!!!!!!!!\", error);\r\n    //   });\r\n    // axios\r\n    //   .get(distanceUrl)\r\n    //   .then((response) => {\r\n    //     // Do something with the response data\r\n    //     console.log(\r\n    //       response.data.rows[0].elements[0].distance.text,\r\n    //       response.data.rows[0].elements[0].duration.text\r\n    //     );\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(error);\r\n    //   });\r\n    (async () => {\r\n      let { status } = await Location.requestForegroundPermissionsAsync();\r\n      if (status !== \"granted\") {\r\n        setErrorMsg(\"Permission to access location was denied\");\r\n        return;\r\n      }\r\n\r\n      let location = await Location.getCurrentPositionAsync({});\r\n      getHospital(location.coords.latitude, location.coords.longitude);\r\n    })();\r\n  }, []);\r\n\r\n  let text = \"Waiting..\";\r\n  if (errorMsg) {\r\n    text = errorMsg;\r\n  } else if (region) {\r\n    text = JSON.stringify(region);\r\n  }\r\n  return (\r\n    <Container>\r\n      {loading ? (\r\n        <MapContainer>\r\n          <ActivityIndicator size=\"large\" />\r\n        </MapContainer>\r\n      ) : (\r\n        <MapContainer>\r\n          <MapView\r\n            style={{ flex: 1 }}\r\n            initialRegion={region.region}\r\n            provider={\"google\"}\r\n            showsUserLocation={true}\r\n            showsMyLocationButton={true}\r\n            showsCompass={true}\r\n            zoomEnabled={true}\r\n            zoomControlEnabled={true}\r\n            rotateEnabled={false}\r\n            mapType=\"standard\"\r\n            onMapReady={() => console.log(\"Map is ready!\")}\r\n            onMapError={(error) => console.log(error)}\r\n            // onPress={(e) => console.log(e.nativeEvent)}\r\n            onLongPress={(e) =>\r\n              getHospital(\r\n                region.region.latitude,\r\n                region.region.longitude,\r\n                10000\r\n              )\r\n            }\r\n            onMarkerPress={(e) => console.log(e.nativeEvent.coordinate)}\r\n            // onRegionChange={(e) => console.log(e.nativeEvent)}\r\n            // onRegionChangeComplete={(e) => console.log(e.nativeEvent)}\r\n          >\r\n            {nearbyPlaces.map((val, index) => {\r\n              return (\r\n                <View key={index}>\r\n                  <Marker\r\n                    coordinate={{\r\n                      latitude: val.geometry.location.lat,\r\n                      longitude: val.geometry.location.lng,\r\n                      latitudeDelta: 0.01,\r\n                      longitudeDelta: 0.01,\r\n                    }}\r\n                  ></Marker>\r\n                  {/* <MapViewDirections\r\n                  origin={{\r\n                    latitude: region.region.latitude,\r\n                    longitude: region.region.longitude,\r\n                  }}\r\n                  destination={{\r\n                    latitude: val.geometry.location.lat,\r\n                    longitude: val.geometry.location.lng,\r\n                  }}\r\n                  apikey=\"AIzaSyA-Pb23fMnh-ofKWhoP9PC9Aaj9C81MCQM\"\r\n                  strokeWidth={3}\r\n                  strokeColor=\"red\"\r\n                ></MapViewDirections> */}\r\n                </View>\r\n              );\r\n            })}\r\n          </MapView>\r\n        </MapContainer>\r\n      )}\r\n      <ThemeButton2 onPress={() => navigation.navigate(\"Landing\")}>\r\n        <ThemeButtonText2>Firstaid Knowledge</ThemeButtonText2>\r\n      </ThemeButton2>\r\n    </Container>\r\n  );\r\n}\r\n\r\n//AIzaSyBzfd20-1HPdKJWq3KZcU1wxgLxUpuZDhg\r\nexport default MapPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}